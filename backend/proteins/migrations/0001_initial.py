# Generated by Django 5.2.3 on 2025-07-03 18:01

import django.contrib.postgres.fields
import django.core.validators
import django.db.models.deletion
import django.utils.timezone
import model_utils.fields
import mptt.fields
import proteins.models.lineage
import proteins.models.mixins
import proteins.models.protein
import proteins.models.spectrum
import proteins.util.helpers
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('contenttypes', '0002_remove_content_type_name'),
        ('references', '0001_initial'),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='ProteinCollection',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created', model_utils.fields.AutoCreatedField(default=django.utils.timezone.now, editable=False, verbose_name='created')),
                ('modified', model_utils.fields.AutoLastModifiedField(default=django.utils.timezone.now, editable=False, verbose_name='modified')),
                ('name', models.CharField(max_length=100)),
                ('description', models.CharField(blank=True, max_length=512)),
                ('managers', django.contrib.postgres.fields.ArrayField(base_field=models.EmailField(max_length=254), blank=True, default=list, size=None)),
                ('private', models.BooleanField(default=False, help_text='Private collections can not be seen by or shared with other users', verbose_name='Private Collection')),
                ('owner', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='%(class)ss', to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='Organism',
            fields=[
                ('id', models.PositiveIntegerField(help_text='NCBI Taxonomy ID', primary_key=True, serialize=False, verbose_name='Taxonomy ID')),
                ('scientific_name', models.CharField(blank=True, max_length=128)),
                ('division', models.CharField(blank=True, max_length=128)),
                ('common_name', models.CharField(blank=True, max_length=128)),
                ('species', models.CharField(blank=True, max_length=128)),
                ('genus', models.CharField(blank=True, max_length=128)),
                ('rank', models.CharField(blank=True, max_length=128)),
            ],
            options={
                'verbose_name': 'Organism',
                'ordering': ['scientific_name'],
            },
        ),
        migrations.CreateModel(
            name='Protein',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created', model_utils.fields.AutoCreatedField(default=django.utils.timezone.now, editable=False, verbose_name='created')),
                ('modified', model_utils.fields.AutoLastModifiedField(default=django.utils.timezone.now, editable=False, verbose_name='modified')),
                ('status', model_utils.fields.StatusField(choices=[('pending', 'pending'), ('approved', 'approved'), ('hidden', 'hidden')], default='pending', max_length=100, no_check_for_status=True, verbose_name='status')),
                ('status_changed', model_utils.fields.MonitorField(default=django.utils.timezone.now, monitor='status', verbose_name='status changed')),
                ('uuid', models.CharField(db_index=True, default=proteins.models.protein.prot_uuid, editable=False, max_length=5, unique=True, verbose_name='FPbase ID')),
                ('name', models.CharField(db_index=True, help_text='Name of the fluorescent protein', max_length=128)),
                ('slug', models.SlugField(help_text='URL slug for the protein', max_length=64, unique=True)),
                ('base_name', models.CharField(max_length=128)),
                ('aliases', django.contrib.postgres.fields.ArrayField(base_field=models.CharField(max_length=200), blank=True, null=True, size=None)),
                ('chromophore', proteins.models.protein._NonNullChar(blank=True, default='', max_length=5)),
                ('seq_validated', models.BooleanField(default=False, help_text='Sequence has been validated by a moderator')),
                ('seq', proteins.models.protein.SequenceField(blank=True, help_text='Amino acid sequence (IPG ID is preferred)', null=True, unique=True, verbose_name='Sequence')),
                ('seq_comment', models.CharField(blank=True, help_text='if necessary, comment on source of sequence', max_length=512)),
                ('pdb', django.contrib.postgres.fields.ArrayField(base_field=models.CharField(max_length=4), blank=True, null=True, size=None, verbose_name='Protein DataBank IDs')),
                ('genbank', models.CharField(blank=True, help_text='NCBI Genbank Accession', max_length=12, null=True, unique=True, verbose_name='Genbank Accession')),
                ('uniprot', models.CharField(blank=True, max_length=10, null=True, unique=True, validators=[django.core.validators.RegexValidator('[OPQ][0-9][A-Z0-9]{3}[0-9]|[A-NR-Z][0-9]([A-Z][A-Z0-9]{2}[0-9]){1,2}', 'Not a valid UniProt Accession')], verbose_name='UniProtKB Accession')),
                ('ipg_id', models.CharField(blank=True, help_text='Identical Protein Group ID at Pubmed', max_length=12, null=True, unique=True, verbose_name='IPG ID')),
                ('mw', models.FloatField(blank=True, help_text='Molecular Weight', null=True)),
                ('agg', models.CharField(blank=True, choices=[('m', 'Monomer'), ('d', 'Dimer'), ('td', 'Tandem dimer'), ('wd', 'Weak dimer'), ('t', 'Tetramer')], help_text='Oligomerization tendency', max_length=2, verbose_name='Oligomerization')),
                ('oser', models.FloatField(blank=True, help_text='OSER score', null=True)),
                ('switch_type', models.CharField(blank=True, choices=[('b', 'Basic'), ('pa', 'Photoactivatable'), ('ps', 'Photoswitchable'), ('pc', 'Photoconvertible'), ('mp', 'Multi-photochromic'), ('o', 'Multistate'), ('t', 'Timer')], default='b', help_text='Photoswitching type (basic if none)', max_length=2, verbose_name='Switching Type')),
                ('blurb', models.TextField(blank=True, help_text='Brief descriptive blurb', max_length=512)),
                ('cofactor', models.CharField(blank=True, choices=[('br', 'Bilirubin'), ('bv', 'Biliverdin'), ('fl', 'Flavin'), ('pc', 'Phycocyanobilin'), ('rl', 'ribityl-lumazine')], help_text='Required for fluorescence', max_length=2)),
                ('created_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='%(class)s_author', to=settings.AUTH_USER_MODEL)),
                ('parent_organism', models.ForeignKey(blank=True, help_text='Organism from which the protein was engineered', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='proteins', to='proteins.organism', verbose_name='Parental organism')),
                ('primary_reference', models.ForeignKey(blank=True, help_text='Preferably the publication that introduced the protein', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='primary_proteins', to='references.reference', verbose_name='Primary Reference')),
                ('references', models.ManyToManyField(blank=True, related_name='proteins', to='references.reference')),
                ('updated_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='%(class)s_modifier', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'ordering': ['name'],
            },
        ),
        migrations.CreateModel(
            name='Camera',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created', model_utils.fields.AutoCreatedField(default=django.utils.timezone.now, editable=False, verbose_name='created')),
                ('modified', model_utils.fields.AutoLastModifiedField(default=django.utils.timezone.now, editable=False, verbose_name='modified')),
                ('part', models.CharField(blank=True, max_length=128)),
                ('url', models.URLField(blank=True)),
                ('name', models.CharField(max_length=100)),
                ('slug', models.SlugField(help_text='Unique slug for the %(class)', max_length=128, unique=True)),
                ('manufacturer', models.CharField(blank=True, max_length=128)),
                ('created_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='%(class)s_author', to=settings.AUTH_USER_MODEL)),
                ('updated_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='%(class)s_modifier', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'ordering': ['name'],
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='Dye',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created', model_utils.fields.AutoCreatedField(default=django.utils.timezone.now, editable=False, verbose_name='created')),
                ('modified', model_utils.fields.AutoLastModifiedField(default=django.utils.timezone.now, editable=False, verbose_name='modified')),
                ('manufacturer', models.CharField(blank=True, max_length=128)),
                ('part', models.CharField(blank=True, max_length=128)),
                ('url', models.URLField(blank=True)),
                ('name', models.CharField(max_length=100)),
                ('slug', models.SlugField(help_text='Unique slug for the %(class)', max_length=128, unique=True)),
                ('ex_max', models.PositiveSmallIntegerField(blank=True, db_index=True, null=True, validators=[django.core.validators.MinValueValidator(300), django.core.validators.MaxValueValidator(900)])),
                ('em_max', models.PositiveSmallIntegerField(blank=True, db_index=True, null=True, validators=[django.core.validators.MinValueValidator(300), django.core.validators.MaxValueValidator(1000)])),
                ('twop_ex_max', models.PositiveSmallIntegerField(blank=True, db_index=True, null=True, validators=[django.core.validators.MinValueValidator(700), django.core.validators.MaxValueValidator(1600)], verbose_name='Peak 2P excitation')),
                ('ext_coeff', models.IntegerField(blank=True, null=True, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(300000)], verbose_name='Extinction Coefficient')),
                ('twop_peakGM', models.FloatField(blank=True, null=True, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(200)], verbose_name='Peak 2P cross-section of S0->S1 (GM)')),
                ('qy', models.FloatField(blank=True, null=True, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(1)], verbose_name='Quantum Yield')),
                ('twop_qy', models.FloatField(blank=True, null=True, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(1)], verbose_name='2P Quantum Yield')),
                ('brightness', models.FloatField(blank=True, editable=False, null=True)),
                ('pka', models.FloatField(blank=True, null=True, validators=[django.core.validators.MinValueValidator(2), django.core.validators.MaxValueValidator(12)], verbose_name='pKa')),
                ('lifetime', models.FloatField(blank=True, help_text='Lifetime (ns)', null=True, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(20)])),
                ('emhex', models.CharField(blank=True, max_length=7)),
                ('exhex', models.CharField(blank=True, max_length=7)),
                ('is_dark', models.BooleanField(default=False, help_text='This state does not fluorescence', verbose_name='Dark State')),
                ('created_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='%(class)s_author', to=settings.AUTH_USER_MODEL)),
                ('updated_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='%(class)s_modifier', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='Filter',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created', model_utils.fields.AutoCreatedField(default=django.utils.timezone.now, editable=False, verbose_name='created')),
                ('modified', model_utils.fields.AutoLastModifiedField(default=django.utils.timezone.now, editable=False, verbose_name='modified')),
                ('manufacturer', models.CharField(blank=True, max_length=128)),
                ('part', models.CharField(blank=True, max_length=128)),
                ('url', models.URLField(blank=True)),
                ('name', models.CharField(max_length=100)),
                ('slug', models.SlugField(help_text='Unique slug for the %(class)', max_length=128, unique=True)),
                ('bandcenter', models.PositiveSmallIntegerField(blank=True, null=True, validators=[django.core.validators.MinValueValidator(200), django.core.validators.MaxValueValidator(1600)])),
                ('bandwidth', models.PositiveSmallIntegerField(blank=True, null=True, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(900)])),
                ('edge', models.FloatField(blank=True, null=True, validators=[django.core.validators.MinValueValidator(300), django.core.validators.MaxValueValidator(1600)])),
                ('tavg', models.FloatField(blank=True, null=True, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(1)])),
                ('aoi', models.PositiveSmallIntegerField(blank=True, null=True, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(90)])),
                ('created_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='%(class)s_author', to=settings.AUTH_USER_MODEL)),
                ('updated_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='%(class)s_modifier', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'ordering': ['bandcenter'],
            },
        ),
        migrations.CreateModel(
            name='FilterPlacement',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('path', models.CharField(choices=[('ex', 'Excitation Path'), ('em', 'Emission Path'), ('bs', 'Both Paths')], max_length=2, verbose_name='Ex/Bs/Em Path')),
                ('reflects', models.BooleanField(default=False, help_text='Filter reflects emission (if BS or EM filter)')),
                ('filter', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='proteins.filter')),
            ],
        ),
        migrations.CreateModel(
            name='FluorophoreCollection',
            fields=[
                ('proteincollection_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='proteins.proteincollection')),
                ('dyes', models.ManyToManyField(blank=True, related_name='collection_memberships', to='proteins.dye')),
            ],
            options={
                'abstract': False,
            },
            bases=('proteins.proteincollection',),
        ),
        migrations.CreateModel(
            name='Light',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created', model_utils.fields.AutoCreatedField(default=django.utils.timezone.now, editable=False, verbose_name='created')),
                ('modified', model_utils.fields.AutoLastModifiedField(default=django.utils.timezone.now, editable=False, verbose_name='modified')),
                ('part', models.CharField(blank=True, max_length=128)),
                ('url', models.URLField(blank=True)),
                ('name', models.CharField(max_length=100)),
                ('slug', models.SlugField(help_text='Unique slug for the %(class)', max_length=128, unique=True)),
                ('manufacturer', models.CharField(blank=True, max_length=128)),
                ('created_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='%(class)s_author', to=settings.AUTH_USER_MODEL)),
                ('updated_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='%(class)s_modifier', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'ordering': ['name'],
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='Microscope',
            fields=[
                ('created', model_utils.fields.AutoCreatedField(default=django.utils.timezone.now, editable=False, verbose_name='created')),
                ('modified', model_utils.fields.AutoLastModifiedField(default=django.utils.timezone.now, editable=False, verbose_name='modified')),
                ('name', models.CharField(max_length=100)),
                ('description', models.CharField(blank=True, max_length=512)),
                ('managers', django.contrib.postgres.fields.ArrayField(base_field=models.EmailField(max_length=254), blank=True, default=list, size=None)),
                ('id', models.CharField(default=proteins.util.helpers.shortuuid, editable=False, max_length=22, primary_key=True, serialize=False)),
                ('extra_lasers', django.contrib.postgres.fields.ArrayField(base_field=models.PositiveSmallIntegerField(validators=[django.core.validators.MinValueValidator(300), django.core.validators.MaxValueValidator(1600)]), blank=True, default=list, size=None)),
                ('cfg_calc_efficiency', models.BooleanField(default=True, help_text='Calculate efficiency on update.')),
                ('cfg_fill_area', models.BooleanField(default=True, help_text='Fill area under spectra.')),
                ('cfg_min_wave', models.PositiveSmallIntegerField(default=350, help_text='Minimum wavelength to display on page load.', validators=[django.core.validators.MinValueValidator(300), django.core.validators.MaxValueValidator(1199)])),
                ('cfg_max_wave', models.PositiveSmallIntegerField(default=800, help_text='Maximum wavelength to display on page load.', validators=[django.core.validators.MinValueValidator(300), django.core.validators.MaxValueValidator(1199)])),
                ('cfg_enable_pan_zoom', models.BooleanField(default=True, help_text='Enable pan and zoom on spectra plot.')),
                ('collection', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='on_scope', to='proteins.proteincollection')),
                ('extra_cameras', models.ManyToManyField(blank=True, related_name='microscopes', to='proteins.camera')),
                ('extra_lights', models.ManyToManyField(blank=True, related_name='microscopes', to='proteins.light')),
                ('owner', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='%(class)ss', to=settings.AUTH_USER_MODEL)),
                ('fluors', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='fluor_on_scope', to='proteins.fluorophorecollection')),
            ],
            options={
                'ordering': ['created'],
            },
        ),
        migrations.CreateModel(
            name='OpticalConfig',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created', model_utils.fields.AutoCreatedField(default=django.utils.timezone.now, editable=False, verbose_name='created')),
                ('modified', model_utils.fields.AutoLastModifiedField(default=django.utils.timezone.now, editable=False, verbose_name='modified')),
                ('name', models.CharField(max_length=100)),
                ('description', models.CharField(blank=True, max_length=512)),
                ('managers', django.contrib.postgres.fields.ArrayField(base_field=models.EmailField(max_length=254), blank=True, default=list, size=None)),
                ('comments', models.CharField(blank=True, max_length=256)),
                ('laser', models.PositiveSmallIntegerField(blank=True, null=True, validators=[django.core.validators.MinValueValidator(300), django.core.validators.MaxValueValidator(1600)])),
                ('camera', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='optical_configs', to='proteins.camera')),
                ('filters', models.ManyToManyField(blank=True, related_name='optical_configs', through='proteins.FilterPlacement', to='proteins.filter')),
                ('light', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='optical_configs', to='proteins.light')),
                ('microscope', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='optical_configs', to='proteins.microscope')),
                ('owner', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='%(class)ss', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'ordering': ['name'],
                'unique_together': {('name', 'microscope')},
            },
        ),
        migrations.AddField(
            model_name='filterplacement',
            name='config',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='proteins.opticalconfig'),
        ),
        migrations.CreateModel(
            name='GeneFamily',
            fields=[
                ('id', models.CharField(default=proteins.util.helpers.shortuuid, editable=False, max_length=22, primary_key=True, serialize=False)),
                ('gene_family', models.SlugField(blank=True, max_length=200, null=True, unique=True)),
                ('parent_organism', models.ForeignKey(blank=True, help_text='Organism from which the gene family was derived', null=True, on_delete=django.db.models.deletion.CASCADE, to='proteins.organism', verbose_name='Parent organism')),
            ],
        ),
        migrations.AddField(
            model_name='proteincollection',
            name='proteins',
            field=models.ManyToManyField(related_name='collection_memberships', to='proteins.protein'),
        ),
        migrations.CreateModel(
            name='Lineage',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created', model_utils.fields.AutoCreatedField(default=django.utils.timezone.now, editable=False, verbose_name='created')),
                ('modified', model_utils.fields.AutoLastModifiedField(default=django.utils.timezone.now, editable=False, verbose_name='modified')),
                ('mutation', proteins.models.lineage.MutationSetField(blank=True, max_length=400)),
                ('rootmut', models.CharField(blank=True, max_length=400)),
                ('lft', models.PositiveIntegerField(editable=False)),
                ('rght', models.PositiveIntegerField(editable=False)),
                ('tree_id', models.PositiveIntegerField(db_index=True, editable=False)),
                ('level', models.PositiveIntegerField(editable=False)),
                ('created_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='%(class)s_author', to=settings.AUTH_USER_MODEL)),
                ('parent', mptt.fields.TreeForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='children', to='proteins.lineage')),
                ('reference', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='lineages', to='references.reference')),
                ('root_node', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, related_name='descendants', to='proteins.lineage', verbose_name='Root Node')),
                ('updated_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='%(class)s_modifier', to=settings.AUTH_USER_MODEL)),
                ('protein', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='lineage', to='proteins.protein')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='Excerpt',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created', model_utils.fields.AutoCreatedField(default=django.utils.timezone.now, editable=False, verbose_name='created')),
                ('modified', model_utils.fields.AutoLastModifiedField(default=django.utils.timezone.now, editable=False, verbose_name='modified')),
                ('status', model_utils.fields.StatusField(choices=[('approved', 'approved'), ('flagged', 'flagged'), ('rejected', 'rejected')], default='approved', max_length=100, no_check_for_status=True, verbose_name='status')),
                ('status_changed', model_utils.fields.MonitorField(default=django.utils.timezone.now, monitor='status', verbose_name='status changed')),
                ('content', models.TextField(help_text='Brief excerpt describing this protein', max_length=1200)),
                ('created_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='%(class)s_author', to=settings.AUTH_USER_MODEL)),
                ('reference', models.ForeignKey(help_text='Source of this excerpt', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='excerpts', to='references.reference')),
                ('updated_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='%(class)s_modifier', to=settings.AUTH_USER_MODEL)),
                ('proteins', models.ManyToManyField(blank=True, related_name='excerpts', to='proteins.protein')),
            ],
            options={
                'ordering': ['reference__year', 'created'],
            },
        ),
        migrations.CreateModel(
            name='ProteinReferences',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('reference', models.ForeignKey(db_column='doi', on_delete=django.db.models.deletion.CASCADE, to='references.reference', to_field='doi')),
            ],
        ),
        migrations.CreateModel(
            name='ProteinTF',
            fields=[
                ('id', models.CharField(default=proteins.util.helpers.shortuuid, editable=False, max_length=22, primary_key=True, serialize=False)),
                ('gene', models.SlugField(blank=True, max_length=200, null=True, unique=True)),
                ('aliases', django.contrib.postgres.fields.ArrayField(base_field=models.TextField(blank=True, null=True), blank=True, null=True, size=None)),
                ('gene_type', django.contrib.postgres.fields.ArrayField(base_field=models.TextField(blank=True, null=True), blank=True, null=True, size=None)),
                ('dna_binding_domain', models.TextField(blank=True, null=True)),
                ('signaling_pathway', models.TextField(blank=True, null=True)),
                ('validation_grade', models.TextField(blank=True, null=True)),
                ('prediction_method', models.TextField(blank=True, null=True)),
                ('microscopy_result', models.JSONField(blank=True, default=dict, null=True)),
                ('motif_enrichment', models.DecimalField(blank=True, decimal_places=5, max_digits=10, null=True)),
                ('motif_q_score', models.DecimalField(blank=True, decimal_places=5, max_digits=10, null=True)),
                ('existing_images', models.TextField(blank=True, null=True)),
                ('existing_images_link', models.TextField(blank=True, null=True)),
                ('existing_fusion', models.TextField(blank=True, null=True)),
                ('cloned_fusion', models.TextField(blank=True, null=True)),
                ('imaging_results', models.TextField(blank=True, null=True)),
                ('notes', models.TextField(blank=True, null=True)),
                ('articles', models.TextField(blank=True, null=True)),
                ('ENSEMBL', models.TextField(blank=True, null=True)),
                ('UNIPROT', models.TextField(blank=True, null=True)),
                ('PDB', models.TextField(blank=True, null=True)),
                ('micro_url', models.TextField(blank=True, null=True)),
                ('AF3', models.TextField(blank=True, null=True)),
                ('proteomics_url', models.TextField(blank=True, null=True)),
                ('rna_url', models.TextField(blank=True, null=True)),
                ('jaspar', django.contrib.postgres.fields.ArrayField(base_field=models.TextField(blank=True, null=True), blank=True, null=True, size=None)),
                ('protein_sequence', models.TextField(blank=True, null=True)),
                ('molecular_weight', models.DecimalField(blank=True, decimal_places=5, max_digits=10, null=True)),
                ('cofactor', django.contrib.postgres.fields.ArrayField(base_field=models.TextField(), blank=True, null=True, size=None)),
                ('oligomerization', models.TextField(blank=True, null=True)),
                ('gene_family', models.ForeignKey(blank=True, help_text='Gene family to which the gene belongs', null=True, on_delete=django.db.models.deletion.CASCADE, to='proteins.genefamily', to_field='gene_family', verbose_name='Gene family')),
                ('parent_organism', models.ForeignKey(blank=True, help_text='Parent organism of the gene', null=True, on_delete=django.db.models.deletion.CASCADE, related_name='parent_organism', to='proteins.organism', verbose_name='Parent organism')),
                ('primary_reference', models.ForeignKey(blank=True, help_text='Primary reference for protein', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='primary_reference', to='references.reference', to_field='doi', verbose_name='reference')),
                ('references', models.ManyToManyField(blank=True, null=True, through='proteins.ProteinReferences', to='references.reference')),
            ],
        ),
        migrations.CreateModel(
            name='ProteinRepeats',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('protein', models.ForeignKey(db_column='gene', on_delete=django.db.models.deletion.CASCADE, to='proteins.proteintf', to_field='gene')),
            ],
        ),
        migrations.AddField(
            model_name='proteinreferences',
            name='protein',
            field=models.ForeignKey(db_column='gene', on_delete=django.db.models.deletion.CASCADE, to='proteins.proteintf', to_field='gene'),
        ),
        migrations.CreateModel(
            name='Repeat',
            fields=[
                ('id', models.CharField(default=proteins.util.helpers.shortuuid, editable=False, max_length=22, primary_key=True, serialize=False)),
                ('name', models.CharField(blank=True, max_length=200, null=True, unique=True)),
                ('slug', models.SlugField(blank=True, max_length=200, null=True)),
                ('aliases', django.contrib.postgres.fields.ArrayField(base_field=models.TextField(blank=True, null=True), blank=True, null=True, size=None)),
                ('motif', models.TextField(blank=True, null=True)),
                ('proteomics', models.TextField(blank=True, null=True)),
                ('dfam_id', models.CharField(blank=True, max_length=100, null=True)),
                ('references', models.TextField(blank=True, null=True)),
                ('parental_organism', models.ForeignKey(blank=True, help_text='Organism from which the protein was engineered', null=True, on_delete=django.db.models.deletion.SET_NULL, to='proteins.organism', verbose_name='Parental organism')),
            ],
        ),
        migrations.AddField(
            model_name='proteintf',
            name='repeats',
            field=models.ManyToManyField(blank=True, null=True, through='proteins.ProteinRepeats', to='proteins.repeat'),
        ),
        migrations.AddField(
            model_name='proteinrepeats',
            name='repeat',
            field=models.ForeignKey(db_column='name', on_delete=django.db.models.deletion.CASCADE, to='proteins.repeat', to_field='name'),
        ),
        migrations.CreateModel(
            name='State',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created', model_utils.fields.AutoCreatedField(default=django.utils.timezone.now, editable=False, verbose_name='created')),
                ('modified', model_utils.fields.AutoLastModifiedField(default=django.utils.timezone.now, editable=False, verbose_name='modified')),
                ('slug', models.SlugField(help_text='Unique slug for the %(class)', max_length=128, unique=True)),
                ('ex_max', models.PositiveSmallIntegerField(blank=True, db_index=True, null=True, validators=[django.core.validators.MinValueValidator(300), django.core.validators.MaxValueValidator(900)])),
                ('em_max', models.PositiveSmallIntegerField(blank=True, db_index=True, null=True, validators=[django.core.validators.MinValueValidator(300), django.core.validators.MaxValueValidator(1000)])),
                ('twop_ex_max', models.PositiveSmallIntegerField(blank=True, db_index=True, null=True, validators=[django.core.validators.MinValueValidator(700), django.core.validators.MaxValueValidator(1600)], verbose_name='Peak 2P excitation')),
                ('ext_coeff', models.IntegerField(blank=True, null=True, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(300000)], verbose_name='Extinction Coefficient')),
                ('twop_peakGM', models.FloatField(blank=True, null=True, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(200)], verbose_name='Peak 2P cross-section of S0->S1 (GM)')),
                ('qy', models.FloatField(blank=True, null=True, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(1)], verbose_name='Quantum Yield')),
                ('twop_qy', models.FloatField(blank=True, null=True, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(1)], verbose_name='2P Quantum Yield')),
                ('brightness', models.FloatField(blank=True, editable=False, null=True)),
                ('pka', models.FloatField(blank=True, null=True, validators=[django.core.validators.MinValueValidator(2), django.core.validators.MaxValueValidator(12)], verbose_name='pKa')),
                ('lifetime', models.FloatField(blank=True, help_text='Lifetime (ns)', null=True, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(20)])),
                ('emhex', models.CharField(blank=True, max_length=7)),
                ('exhex', models.CharField(blank=True, max_length=7)),
                ('is_dark', models.BooleanField(default=False, help_text='This state does not fluorescence', verbose_name='Dark State')),
                ('name', models.CharField(default='default', max_length=64)),
                ('maturation', models.FloatField(blank=True, help_text='Maturation time (min)', null=True, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(1600)])),
                ('created_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='%(class)s_author', to=settings.AUTH_USER_MODEL)),
                ('protein', models.ForeignKey(help_text='The protein to which this state belongs', on_delete=django.db.models.deletion.CASCADE, related_name='states', to='proteins.protein')),
                ('updated_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='%(class)s_modifier', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'State',
            },
        ),
        migrations.CreateModel(
            name='Spectrum',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created', model_utils.fields.AutoCreatedField(default=django.utils.timezone.now, editable=False, verbose_name='created')),
                ('modified', model_utils.fields.AutoLastModifiedField(default=django.utils.timezone.now, editable=False, verbose_name='modified')),
                ('status', model_utils.fields.StatusField(choices=[('approved', 'approved'), ('pending', 'pending'), ('rejected', 'rejected')], default='approved', max_length=100, no_check_for_status=True, verbose_name='status')),
                ('status_changed', model_utils.fields.MonitorField(default=django.utils.timezone.now, monitor='status', verbose_name='status changed')),
                ('data', proteins.models.spectrum.SpectrumData(base_field=django.contrib.postgres.fields.ArrayField(base_field=models.FloatField(max_length=10), size=2), size=None)),
                ('category', models.CharField(choices=[('d', 'Dye'), ('p', 'Protein'), ('l', 'Light Source'), ('f', 'Filter'), ('c', 'Camera')], db_index=True, max_length=1, verbose_name='Spectrum Type')),
                ('subtype', models.CharField(choices=[('ex', 'Excitation'), ('ab', 'Absorption'), ('em', 'Emission'), ('2p', 'Two Photon Abs'), ('bp', 'Bandpass'), ('bx', 'Bandpass-Ex'), ('bm', 'Bandpass-Em'), ('sp', 'Shortpass'), ('lp', 'Longpass'), ('bs', 'Beamsplitter'), ('qe', 'Quantum Efficiency'), ('pd', 'Power Distribution')], db_index=True, max_length=2, verbose_name='Spectrum Subtype')),
                ('ph', models.FloatField(blank=True, null=True, verbose_name='pH')),
                ('solvent', models.CharField(blank=True, max_length=128)),
                ('source', models.CharField(blank=True, help_text='Source of the spectra data', max_length=128)),
                ('created_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='%(class)s_author', to=settings.AUTH_USER_MODEL)),
                ('owner_camera', models.OneToOneField(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='spectrum', to='proteins.camera')),
                ('owner_dye', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='spectra', to='proteins.dye')),
                ('owner_filter', models.OneToOneField(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='spectrum', to='proteins.filter')),
                ('owner_light', models.OneToOneField(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='spectrum', to='proteins.light')),
                ('reference', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='spectra', to='references.reference')),
                ('updated_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='%(class)s_modifier', to=settings.AUTH_USER_MODEL)),
                ('owner_state', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='spectra', to='proteins.state')),
            ],
            options={
                'verbose_name_plural': 'spectra',
            },
            bases=(models.Model, proteins.models.mixins.AdminURLMixin),
        ),
        migrations.AddField(
            model_name='protein',
            name='default_state',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='default_for', to='proteins.state'),
        ),
        migrations.CreateModel(
            name='BleachMeasurement',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created', model_utils.fields.AutoCreatedField(default=django.utils.timezone.now, editable=False, verbose_name='created')),
                ('modified', model_utils.fields.AutoLastModifiedField(default=django.utils.timezone.now, editable=False, verbose_name='modified')),
                ('rate', models.FloatField(help_text='Photobleaching half-life (s)', validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(3000)], verbose_name='Bleach Rate')),
                ('power', models.FloatField(blank=True, help_text="If not reported, use '-1'", null=True, validators=[django.core.validators.MinValueValidator(-1)], verbose_name='Illumination Power')),
                ('units', models.CharField(blank=True, help_text='e.g. W/cm2', max_length=100, verbose_name='Power Units')),
                ('light', models.CharField(blank=True, choices=[('a', 'Arc-lamp'), ('la', 'Laser'), ('le', 'LED'), ('o', 'Other')], max_length=2, verbose_name='Light Source')),
                ('bandcenter', models.PositiveSmallIntegerField(blank=True, help_text='Band center of excitation light filter', null=True, validators=[django.core.validators.MinValueValidator(200), django.core.validators.MaxValueValidator(1600)], verbose_name='Band Center (nm)')),
                ('bandwidth', models.PositiveSmallIntegerField(blank=True, help_text='Bandwidth of excitation light filter', null=True, validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(1000)], verbose_name='Bandwidth (nm)')),
                ('modality', models.CharField(blank=True, choices=[('wf', 'Widefield'), ('ps', 'Point Scanning Confocal'), ('sd', 'Spinning Disc Confocal'), ('s', 'Spectrophotometer'), ('t', 'TIRF'), ('o', 'Other')], max_length=2, verbose_name='Imaging Modality')),
                ('temp', models.FloatField(blank=True, null=True, verbose_name='Temp (˚C)')),
                ('fusion', models.CharField(blank=True, help_text='(if applicable)', max_length=60, verbose_name='Fusion Protein')),
                ('in_cell', models.IntegerField(blank=True, choices=[(-1, 'Unkown'), (0, 'No'), (1, 'Yes')], default=-1, help_text='protein expressed in living cells', verbose_name='In cells?')),
                ('cell_type', models.CharField(blank=True, help_text='e.g. HeLa', max_length=60, verbose_name='Cell Type')),
                ('created_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='%(class)s_author', to=settings.AUTH_USER_MODEL)),
                ('reference', models.ForeignKey(blank=True, help_text='Reference where the measurement was made', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='bleach_measurements', to='references.reference', verbose_name='Measurement Reference')),
                ('updated_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='%(class)s_modifier', to=settings.AUTH_USER_MODEL)),
                ('state', models.ForeignKey(help_text='The state on which this measurement was made', on_delete=django.db.models.deletion.CASCADE, related_name='bleach_measurements', to='proteins.state', verbose_name='Protein (state)')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='StateTransition',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created', model_utils.fields.AutoCreatedField(default=django.utils.timezone.now, editable=False, verbose_name='created')),
                ('modified', model_utils.fields.AutoLastModifiedField(default=django.utils.timezone.now, editable=False, verbose_name='modified')),
                ('trans_wave', models.PositiveSmallIntegerField(blank=True, help_text='Wavelength required', null=True, validators=[django.core.validators.MinValueValidator(300), django.core.validators.MaxValueValidator(1000)], verbose_name='Transition Wavelength')),
                ('created_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='%(class)s_author', to=settings.AUTH_USER_MODEL)),
                ('from_state', models.ForeignKey(help_text='The initial state ', on_delete=django.db.models.deletion.CASCADE, related_name='transitions_from', to='proteins.state', verbose_name='From state')),
                ('protein', models.ForeignKey(help_text='The protein that demonstrates this transition', on_delete=django.db.models.deletion.CASCADE, related_name='transitions', to='proteins.protein', verbose_name='Protein Transitioning')),
                ('to_state', models.ForeignKey(help_text='The state after transition', on_delete=django.db.models.deletion.CASCADE, related_name='transitions_to', to='proteins.state', verbose_name='To state')),
                ('updated_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='%(class)s_modifier', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.AddField(
            model_name='state',
            name='transitions',
            field=models.ManyToManyField(blank=True, related_name='transition_state', through='proteins.StateTransition', to='proteins.state', verbose_name='State Transitions'),
        ),
        migrations.CreateModel(
            name='OcFluorEff',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created', model_utils.fields.AutoCreatedField(default=django.utils.timezone.now, editable=False, verbose_name='created')),
                ('modified', model_utils.fields.AutoLastModifiedField(default=django.utils.timezone.now, editable=False, verbose_name='modified')),
                ('object_id', models.PositiveIntegerField()),
                ('fluor_name', models.CharField(blank=True, max_length=100)),
                ('ex_eff', models.FloatField(blank=True, null=True, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(1)], verbose_name='Excitation Efficiency')),
                ('ex_eff_broad', models.FloatField(blank=True, null=True, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(1)], verbose_name='Excitation Efficiency (Broadband)')),
                ('em_eff', models.FloatField(blank=True, null=True, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(1)], verbose_name='Emission Efficiency')),
                ('brightness', models.FloatField(blank=True, null=True)),
                ('content_type', models.ForeignKey(limit_choices_to=models.Q(models.Q(('app_label', 'proteins'), ('model', 'state')), models.Q(('app_label', 'proteins'), ('model', 'dye')), _connector='OR'), on_delete=django.db.models.deletion.CASCADE, to='contenttypes.contenttype')),
                ('oc', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='proteins.opticalconfig')),
            ],
            options={
                'unique_together': {('oc', 'content_type', 'object_id')},
            },
        ),
        migrations.AlterUniqueTogether(
            name='proteincollection',
            unique_together={('owner', 'name')},
        ),
        migrations.CreateModel(
            name='OSERMeasurement',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created', model_utils.fields.AutoCreatedField(default=django.utils.timezone.now, editable=False, verbose_name='created')),
                ('modified', model_utils.fields.AutoLastModifiedField(default=django.utils.timezone.now, editable=False, verbose_name='modified')),
                ('percent', models.FloatField(blank=True, help_text="Percentage of 'normal' looking cells", null=True, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(100)], verbose_name='Percent Normal Cells')),
                ('percent_stddev', models.FloatField(blank=True, help_text='Standard deviation of percent normal cells (if applicable)', null=True, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(100)], verbose_name='StdDev')),
                ('percent_ncells', models.IntegerField(blank=True, help_text='Number of cells analyzed in percent normal for this FP', null=True, verbose_name='Number of cells for percent measurement')),
                ('oserne', models.FloatField(blank=True, help_text='Ratio of OSER to nuclear envelope (NE) fluorescence intensities', null=True, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(100)], verbose_name='OSER/NE ratio')),
                ('oserne_stddev', models.FloatField(blank=True, help_text='Standard deviation of OSER/NE ratio (if applicable)', null=True, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(100)], verbose_name='OSER/NE StdDev')),
                ('oserne_ncells', models.IntegerField(blank=True, help_text='Number of cells analyzed in OSER/NE this FP', null=True, verbose_name='Number of cells for OSER/NE measurement')),
                ('celltype', models.CharField(blank=True, help_text='e.g. COS-7, HeLa', max_length=64, verbose_name='Cell Type')),
                ('temp', models.FloatField(blank=True, null=True, verbose_name='Temperature')),
                ('created_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='%(class)s_author', to=settings.AUTH_USER_MODEL)),
                ('reference', models.ForeignKey(blank=True, help_text='Reference where the measurement was made', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='oser_measurements', to='references.reference', verbose_name='Measurement Reference')),
                ('updated_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='%(class)s_modifier', to=settings.AUTH_USER_MODEL)),
                ('protein', models.ForeignKey(help_text='The protein on which this measurement was made', on_delete=django.db.models.deletion.CASCADE, related_name='oser_measurements', to='proteins.protein', verbose_name='Protein')),
            ],
            options={
                'unique_together': {('protein', 'reference')},
            },
        ),
        migrations.AlterUniqueTogether(
            name='proteinreferences',
            unique_together={('protein', 'reference')},
        ),
        migrations.AlterUniqueTogether(
            name='proteinrepeats',
            unique_together={('protein', 'repeat')},
        ),
        migrations.AlterUniqueTogether(
            name='state',
            unique_together={('protein', 'ex_max', 'em_max', 'ext_coeff', 'qy')},
        ),
    ]
